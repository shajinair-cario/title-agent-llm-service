package com.cario.title.app.model;

import java.time.Instant;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * Represents the execution details for a single processing phase in a document's lifecycle.
 *
 * <p>Each {@code PhaseRecord} contains:
 *
 * <ul>
 *   <li>Status of the phase (pending, running, completed, failed)
 *   <li>Timestamps for when the phase started and completed
 *   <li>Number of execution attempts
 *   <li>Optional informational or error message
 *   <li>Artifacts generated by the phase, grouped by type
 * </ul>
 *
 * <p>Defensive copies are used for {@link Instant} and {@link Map} fields to prevent exposing
 * internal mutable state.
 *
 * @author Your Name
 * @version 1.0
 * @since 2025-08-14
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class PhaseRecord {

  /** Status of the phase. */
  private DocProcessState.Status status;

  /** Timestamp when the phase started. */
  private Instant startedAt;

  /** Timestamp when the phase completed. */
  private Instant completedAt;

  /** Number of attempts made to execute this phase. */
  private Integer attempts;

  /** Optional message containing phase-related information or error details. */
  private String message;

  /**
   * Map of artifact type â†’ list of artifacts generated by this phase. Example:
   *
   * <pre>
   * {
   *   "json": [ { "key": "s3://bucket/result.json" } ],
   *   "csv": [ { "key": "s3://bucket/result.csv" } ]
   * }
   * </pre>
   */
  @Builder.Default private Map<String, List<Artifact>> artifactsByType = new HashMap<>();

  // ---- Defensive copy overrides ----

  public Instant getStartedAt() {
    return startedAt == null ? null : Instant.from(startedAt);
  }

  public void setStartedAt(Instant startedAt) {
    this.startedAt = startedAt == null ? null : Instant.from(startedAt);
  }

  public Instant getCompletedAt() {
    return completedAt == null ? null : Instant.from(completedAt);
  }

  public void setCompletedAt(Instant completedAt) {
    this.completedAt = completedAt == null ? null : Instant.from(completedAt);
  }

  public Map<String, List<Artifact>> getArtifactsByType() {
    return artifactsByType == null ? null : new HashMap<>(artifactsByType);
  }

  public void setArtifactsByType(Map<String, List<Artifact>> artifactsByType) {
    this.artifactsByType = artifactsByType == null ? null : new HashMap<>(artifactsByType);
  }
}
